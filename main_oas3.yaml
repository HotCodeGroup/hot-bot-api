openapi: 3.0.0
info:
  title: Hot bot API
  version: 0.0.1
  contact:
    name: HotCodeGroup
    url: https://github.com/HotCodeGroup
paths:
  /users/{userID}:
    get:
      tags:
        - users
      summary: Get user info by ID
      operationId: getUser
      parameters:
        - name: userID
          in: path
          description: ID of user that needs to be get
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoUser'
  /signup:
    post:
      tags:
        - users
      summary: Creates new user
      operationId: createUser
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpUser'
      responses:
        '200':
          description: Returns empty struct if user created or errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      $ref: '#/components/schemas/Error'                 
components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: Code of error
          example: 15
        message:
          type: string
          description: Message to display for user
          example: Already used!
        description:
          type: string
          description: Describes error for developer
          example: Database error UNIQUE field  
    BasicUser:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          description: Name for login
          example: xXxNaGiBaToRxXx
        email:
          type: string
          description: User email
          example: vitalik2007@gmail.com
        firstName:
          type: string
          description: User first name
          example: Vitaly
        lastName:
          type: string
          description: User last name
          example: Pryahov
    InfoUser:
      allOf:
        - $ref: '#/components/schemas/BasicUser'
        - type: object
          required:
            - id
            - active
          properties:
            id:
              type: integer
              format: int64
              description: user ID
              example: 1
            active:
              type: boolean
              description: Returns if a profile is blocked
              example: true
    SignInUser:
      type: object
      required: 
        - username
        - password
      properties:
        username:
          type: string
          description: name for login
          example: xXxNaGiBaToRxXx
        password:
          type: string
          description: secret word for login
          example: qwerty1234
    SignUpUser:
      allOf:
        - $ref: '#/components/schemas/BasicUser'
        - $ref: '#/components/schemas/SignInUser'
    Bot:
      type: object
      required:
        - id
        - authorID
        - timestamp
      properties:
        id:
          type: integer
          format: int64
          description: Bot unique ID
          example: 1
        authorID:
          type: integer
          format: int64
          description: ID of user who creates that bot
          example: 1
        timestamp:
          type: integer
          format: int64
          description: Timestamp when bot was sended in Unixtime
          example: 947419200
        code:
          type: string
          description: Source code of bot
          example: const a=5
        approved:
          type: boolean
          description: Returns if bot was validated
          example: true
        lastGames:
          type: array
          description: Last games IDs with given offset and count
          items:
            type: integer
            format: int64
          example:
            - 1
            - 2
            - 3  
    Game: 
      type: object
      required:
        - id
        - title
        - description
        - rulesURL
        - active
      properties:
        id:
          type: integer
          format: int64
          description: game ID
          example: 1
        title: 
          type: string
          description: Name of game
          example: Ping Pong  
        description:
          type: string
          description: Description of game
          example: Write bot for playing ping pong          
        rulesURL: 
          type: string
          description: URL to the rules for game
          example: https://hotbot.game/s/1548595030145/assets/documentation/pingpong.pdf?rnd
        previewURL: 
          type: string
          description: URL to the game`s preview
          example: https://hotbot.game/s/1548595030145/assets/application/img/ping-pong-sample.png
        active:
          type: boolean
          description: Returns if a game is available for new bots
          example: true
