openapi: 3.0.0
servers:
  - url: http://api.warscript.tech/v1
info:
  title: WarScript API 
  version: 0.0.3
  contact:
    name: HotCodeGroup
    url: https://github.com/HotCodeGroup
paths:
  /sessions:
    get:
      tags:
        - auth
      summary: Returns user info who logged in
      operationId: getSessionUser
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Returns userinfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServer'
    post:
      tags:
        - auth
      summary: Signs in and returns the authentication cookie
      operationId: signInUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInUser'
      responses:
        '200':
          description: User successfully logged in
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
        '400':
          description: "username: not_exists|required; 
                        password: invalid|required"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateError'
        '500':
          $ref: '#/components/responses/InternalServer'
    delete:
      tags:
        - auth
      summary: Signs out and deletes the authentication cookie
      operationId: signOutUser
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Deletes the authentication cookie
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServer'
  /users:
    post:
      tags:
        - users
      summary: Creates new user
      operationId: signUpUser
      security: []
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpUser'
      responses:
        '200':
          description: User successfully signed up and logged in
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
        '400':
          description: "username: taken|required; 
                        password: required"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateError'
        '500':
          $ref: '#/components/responses/InternalServer'
    put:
      tags:
        - users
      summary: Update user info
      operationId: updateUser
      security:
        - cookieAuth: []
      requestBody:
        description: Contains fields update to
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/BasicUser'
                - type: object
                  properties:
                    oldPassword:
                      type: string
                      description: Confirms old password for change password operation
                      example: qwerty1234
                    newPassword:
                      type: string
                      description: New password for change password operation
                      example: qwerty4321
                    photo:
                      $ref: '#/components/schemas/Photo'
      responses:
        '200':
          description: Returns empty struct if user updated or errors
        '400':
          description: "username: taken; 
                        oldPassword: invalid|required(if newPassword used)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServer'
    delete:
      tags:
        - users
      deprecated: true
      summary: Deletes user account(temproraty deprecated)
      operationId: deleteUser
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Returns empty struct(and deletes cookie) if user updated or errors
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServer'
  /users/{user_id}:
    get:
      tags:
        - users
      summary: Get user info by ID
      operationId: getUser
      security: []
      parameters:
        - name: user_id
          in: path
          description: id of user that needs to be get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoUser'
        '404':
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServer'
  /users/used:
    post:
      tags:
        - users
      summary: Checks if username already used
      operationId: checkUsername
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
                  description: Username to check
                  example: BaCeK1338  
      responses:
        '200':
          description: Returns used = true if username already used
          content:
            application/json:
              schema:
                type: object
                required:
                  - used
                properties:
                  used:
                    type: boolean
                    description: True if usernamed used
                    example: false
        '429':
          description: only 1 request per second
          headers:
            Retry-After:
              schema: 
                type: integer
                description: A non-negative number of seconds that
                            indicates the time to wait before a new request.
                example: 1
            
        '500':
          $ref: '#/components/responses/InternalServer'
  /photos/{photo_uuid}:
    get:
      tags:
        - photos
      summary: Returns photo in specified format by photo
      security: []
      responses:
        '200':
          description: photo found and returned
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Upload'
        '400':
          description: format not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: photo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServer'
      parameters:
        - name: photo_uuid
          in: path
          description: id of user that needs to be get
          required: true
          schema:
            type: string
            example: "justyour-norm-uuid-none-special66666"
        - name: format
          in: query
          description: specifies returning format
          schema:
            type: string
            example: "300x300"
  /photos:
    post:
      tags:
        - photos
      summary: Saves photo on server and returns photo_uuid and server name
      security: []
      requestBody: 
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Upload'
      responses:
        '200':
          description: Photo successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfullUpload'
        '406':
          description: file format not supporded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServer'

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServer:
      description: some strange server error(lost db conn etc.)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: error description
          example: some error text
    ValidateError:
      type: object
      additionalProperties:
        type: string
        example: taken
    Photo:
      type: object
      required:
        - photo_uuid
      properties:
        photo_uuid:
          type: string
          description: photo unique id
          example: ds12dasd-adsasd21-asd
    BasicUser:
      type: object
      properties:
        username:
          type: string
          description: Name for login
          example: xXxNaGiBaToRxXx
    InfoUser:
      allOf:
        - $ref: '#/components/schemas/BasicUser'
        - type: object
          required:
            - id
            - active
          properties:
            id:
              type: integer
              format: int64
              description: user ID
              example: 1
            active:
              type: boolean
              description: Returns if a profile is blocked
              example: true
            photo:
              $ref: '#/components/schemas/Photo'
    SignInUser:
      type: object
      required: 
        - username
        - password
      properties:
        username:
          type: string
          description: name for login
          example: xXxNaGiBaToRxXx
        password:
          type: string
          description: secret word for login
          example: qwerty1234
    Upload:
      type: object
      properties:
        photo:
          type: string
          format: binary
    SuccessfullUpload:
      type: object
      properties:
        photo_uuid: 
          type: string
          description: UUID for photo on server
          example: "justyour-norm-uuid-none-special66666"
    SignUpUser:
      allOf:
        - $ref: '#/components/schemas/BasicUser'
        - $ref: '#/components/schemas/SignInUser'
    Bot:
      type: object
      required:
        - id
        - authorID
        - timestamp
      properties:
        id:
          type: integer
          format: int64
          description: Bot unique ID
          example: 1
        authorID:
          type: integer
          format: int64
          description: ID of user who creates that bot
          example: 1
        timestamp:
          type: integer
          format: int64
          description: Timestamp when bot was sended in Unixtime
          example: 947419200
        code:
          type: string
          description: Source code of bot
          example: const a=5
        approved:
          type: boolean
          description: Returns if bot was validated
          example: true
        lastGames:
          type: array
          description: Last games IDs with given offset and count
          items:
            type: integer
            format: int64
          example:
            - 1
            - 2
            - 3  
    Game: 
      type: object
      required:
        - id
        - title
        - description
        - rulesURL
        - active
      properties:
        id:
          type: integer
          format: int64
          description: game ID
          example: 1
        title: 
          type: string
          description: Name of game
          example: Ping Pong  
        description:
          type: string
          description: Description of game
          example: Write bot for playing ping pong          
        rulesURL: 
          type: string
          description: URL to the rules for game
          example: https://hotbot.game/s/1548595030145/assets/documentation/pingpong.pdf?rnd
        previewURL: 
          type: string
          description: URL to the game`s preview
          example: https://hotbot.game/s/1548595030145/assets/application/img/ping-pong-sample.png
        active:
          type: boolean
          description: Returns if a game is available for new bots
          example: true


